{
	// Place your url-shortener workspace snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders.
	// Placeholders with the same ids are connected.
	// Example:
	// "Print to console": {
	// 	"scope": "javascript,typescript",
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }

	// https://yew.rs/docs/getting-started/editor-setup#vs-code
	"New Yew function component": {
			"prefix": "yewfc",
			"body": [
					"#[derive(PartialEq, Properties)]",
					"pub struct ${1:ComponentName}Props {}",
					"",
					"#[function_component]",
					"pub fn $1(props: &${1}Props) -> Html {",
					"    let ${1}Props {} = props;",
					"    html! {",
					"        <${2:div}>$0</${2}>",
					"    }",
					"}"
			],
			"description": "Create a minimal Yew function component",
			"scope": "rust",
	},
	"New Yew struct component": {
			"prefix": "yewsc",
			"body": [
					"pub struct ${1:ComponentName};",
					"",
					"pub enum ${1}Msg {",
					"}",
					"",
					"impl Component for ${1} {",
					"    type Message = ${1}Msg;",
					"    type Properties = ();",
					"",
					"    fn create(ctx: &Context<Self>) -> Self {",
					"        Self",
					"    }",
					"",
					"    fn view(&self, ctx: &Context<Self>) -> Html {",
					"        html! {",
					"            $0",
					"        }",
					"    }",
					"}"
			],
			"description": "Create a new Yew component with a message enum",
			"scope": "rust",
	},
}
